apply plugin: 'com.android.application'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.android.material:material:1.0.0'

    // 多dex配置
    implementation 'androidx.multidex:multidex:2.0.0'
    // 集成Bugly热更新aar（本地集成使用方式）
    //implementation(name: 'bugly_crashreport_upgrade-1.5.0', ext: 'aar')
    // 远程仓库集成方式（推荐）
    implementation 'com.tencent.bugly:crashreport_upgrade:1.5.0'
    //1. 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    //2.为了便于解答问题，这里的tinker版本建议跟随此处demo设置，如果微信更新了tinker版本，bugly会定期同步更新
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.14.10'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
    // walle（多渠道使用）
    // compile 'com.meituan.android.walle:library:1.1.3'
}

android {
    compileSdkVersion 28

    // 编译选项
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // recommend
    dexOptions {
        jumboMode = true
    }

    // 签名配置
    signingConfigs {
        release {
            try {
                storeFile file("./keystore/release.keystore")
                storePassword "testres"
                keyAlias "testres"
                keyPassword "testres"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("./keystore/debug.keystore")
        }
    }

    // 默认配置
    defaultConfig {
        applicationId "com.tencent.bugly.hotfix"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 3
        versionName "2.0"

        // 开启multidex
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                cppFlags ""
                abiFilters 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'//,'armeabi'
            }
        }
        ndk {
            // 设置支持的SO库架构
            abiFilters 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'//,'armeabi'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    // 构建类型
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    // 多渠道配置
   /*flavorDimensions "tier"


    productFlavors {
        xiaomi {
            dimension "tier"
        }
        yyb {
            dimension "tier"
        }

        wdj {
            dimension "tier"
        }
    }*/

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

}
// 依赖插件脚本
apply from: 'tinker-support.gradle'

// 多渠道使用walle示例（注：多渠道使用）
//apply from: 'multiple-channel.gradle'


